#+TITLE: dogenpunk .emacs.el file
#+EMAIL: dogenpunk@gmail.com
#+STARTUP:  odd hidestarts fold
#+OPTIONS:  skip:nil toc:nil
#+PROPERTY: header-args :tangle ~/.emacs.el :comments both

This is my =.emacs.el= file written in =org-mode=.

* Emacs start time
Tracking Emacs' start time is more of a curiosity to me rather than a
metric I obsess over. Using =lexical-let= from the forever controversial
=cl= package allows me to keep this code all together rather than having
to split it between the start and end of the file.
#+begin_src emacs-lisp
  (eval-when-compile (require 'cl))

  (lexical-let ((emacs-start-time (current-time)))
    (add-hook 'emacs-startup-hook
              (lambda ()
                (let ((elapsed (float-time (time-subtract (current-time) emacs-start-time))))
                  (message "[Emacs initialized in %.3fs]" elapsed)))))
#+end_src

** Tweek garbage collection
#+begin_src emacs-lisp
  (lexical-let ((old-gc-cons-threshold gc-cons-threshold))
    (setq gc-cons-threshold (* 256 1024 1024))
    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq gc-cons-threshold old-gc-cons-threshold))))
#+end_src

* Package Initialization
#+begin_src emacs-lisp
  (require 'gnutls)
  (add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("gnu"   . "https://elpa.gnu.org/packages/")))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

* Package and file loading
** Load path
#+begin_src emacs-lisp
  (let ((base (concat user-emacs-directory "elisp/")))
    (add-to-list 'load-path base)
    (dolist (dir (directory-files base t "^[^.]"))
      (when (file-directory-p dir)
        (add-to-list 'load-path dir))))
#+end_src
** Measure load

#+begin_src emacs-lisp
  (defmacro /boot/measure-load (target &rest body)
    (declare (indent defun))
    `(let ((elapsed)
           (start (current-time)))
       (prog1
           ,@body
         (with-current-buffer (get-buffer-create "*Load Times*")
           (when (= 0 (buffer-size))
             (insert (format "| %-60s | %-23s | elapsed |\n" "feature" "timestamp"))
             (insert "|------------------------------------------+-------------------------+----------|\n"))
           (goto-char (point-max))
           (setq elapsed (float-time (time-subtract (current-time) start)))
           (insert (format "| %-60s | %s | %f |\n"
                           ,target
                           (format-time-string "%Y-%m-%d %H:%M:%S.%3N" (current-time))
                           elapsed))))))

  (defadvice load (around dotemacs activate)
    (/boot/measure-load file ad-do-it))

  (defadvice require (around dotemacs activate)
    (if (memq feature features)
        ad-do-it
      (/boot/measure-load feature ad-do-it)))
#+end_src

** Require package

#+begin_src emacs-lisp
  (defun require-package (package)
    "Ensures that PACKAGE is installed."
    (unless (or (package-installed-p package)
                (require package nil 'noerror))
      (unless (assoc package package-archive-contents)
        (package-refresh-contents))
      (package-install package)))
#+end_src

** `After' macro

#+begin_src emacs-lisp
  (defmacro after (feature &rest body)
    "Executes BODY after FEATURE has been loaded."
    (declare (indent 1))
    (cond
     ((vectorp feature)
      (let ((prog (macroexp-progn body)))
        (cl-loop for f across feature
                 do
                 (progn
                   (setq prog (append `(',f) `(,prog)))
                   (setq prog (append '(with-eval-after-load) prog))))
        prog))
     (t
      `(with-eval-after-load ,feature ,@body))))
#+end_src

** After Load
   #+begin_src emacs-lisp
     (if (fboundp 'with-eval-after-load)
         (defalias 'after-load 'with-eval-after-load)
       (defmacro after-load (feature &rest body)
         "After FEATURE is loaded, evaluate BODY."
         (declare (indent defun))
         `(eval-after-load ,feature
            '(progn ,@body))))
   #+end_src
** Lazy major mode

#+begin_src emacs-lisp
  (defmacro /boot/lazy-major-mode (pattern mode)
    "Defines a new major-mode matched by PATTERN, installs MODE if necessary, and activates it."
    `(add-to-list 'auto-mode-alist
                  '(,pattern . (lambda ()
                                 (require-package (quote ,mode))
                                 (,mode)))))
#+end_src

** Delayed init

#+begin_src emacs-lisp
  (defmacro /boot/delayed-init (&rest body)
    "Runs BODY after idle for a predetermined amount of time."
    `(run-with-idle-timer
      0.5
      nil
      (lambda () ,@body)))
#+end_src

* UI
#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (display-time-mode t)
  (size-indication-mode t)

  ;; Whitespace
  (require-package 'whitespace)
  (setq whitespace-line-column 79)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (require-package 'origami)
  (global-origami-mode)

  (require-package 'diminish)
  (diminish 'visual-line-mode)
  (after 'aggressive-indent (diminish 'aggressive-indent-mode))
  (after 'autorevert (diminish #'auto-revert-mode))
  (after 'company (diminish 'company-mode))
  (after 'counsel (diminish #'counsel-mode))
  (after 'eldoc (diminish 'eldoc-mode))
  (after 'elisp-slime-nav (diminish 'elisp-slime-nav-mode))
  (after 'flycheck (diminish 'flycheck-mode))
  (after 'ivy (diminish 'ivy-mode))
  (after 'smartparens (diminish 'smartparens-mode))
  (after 'which-key (diminish 'which-key-mode))
  (after 'highlight-symbol (diminish 'highlight-symbol-mode))

  (require-package 'smart-mode-line)
  (sml/setup)

  (when (and (display-graphic-p)
             (font-info "all-the-icons"))
    (setq all-the-icons-scale-factor 0.7)
    (setq inhibit-compacting-font-caches t)

    (after 'dired
      (require-package 'all-the-icons-dired)
      (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))

    (after 'ivy
      (require-package 'all-the-icons-ivy)
      (all-the-icons-ivy-setup)))

  (add-hook 'find-file-hook #'hl-line-mode)

  (winner-mode t)
  (require-package 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (require-package 'highlight-symbol)
  (setq highlight-symbol-idle-delay 0.3)
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)

  (require-package 'highlight-quoted)
  (add-hook 'prog-mode-hook 'highlight-quoted-mode)

  ;; Themes
  ;; https://www.greghendershott.com/2017/02/emacs-themes.html
  (defvar /config/theme-hooks nil
    "((theme-id . function) ...)")

  (defun /config/add-theme-hook (theme-id hook-fn)
    (add-to-list '/config/theme-hooks (cons theme-id hook-fn)))

  (defun /config/disable-themes ()
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

  (defun /config/load-theme-advice (f theme-id &optional no-confirm no-enable &rest args)
    "Enhances `load-theme' in two ways:
  1. Disables enabled themes for a clean slate.
  2. Calls functions registered using `/config/add-theme-hook'."
    (unless no-enable
      (/config/disable-themes))
    (prog1
        (apply f theme-id no-confirm no-enable args)
      (unless no-enable
        (pcase (assq theme-id /config/theme-hooks)
          (`(,_ . ,f) (funcall f))))))

  (advice-add 'load-theme
              :around
              #'/config/load-theme-advice)

  ;; (load-theme 'gruvbox-dark-hard)
  (load-theme 'nimbus)

  ;;
  (require-package 'beacon)
  (beacon-mode 1)
  (setq beacon-blink-when-buffer-changes t)
  (setq beacon-blink-when-window-scrolls t)
  (setq beacon-blink-when-window-changes t)
  (setq beacon-blink-when-focused t)

  (setq beacon-blink-duration 0.3)
  (setq beacon-blink-delay 0.3)
  (setq beacon-size 20)
  (setq beacon-color "yellow")

  (add-to-list 'beacon-dont-blink-major-modes 'term-mode)


  ;; Dashboard
  (require-package 'dashboard)
  (require 'dashboard)
  (dashboard-setup-startup-hook)

  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))

  (mouse-avoidance-mode 'cat-and-mouse)

  (setq fill-column 72)
  (setq visible-bell t)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (display-graphic-p) (menu-bar-mode -1))
#+end_src

* Core
#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))

  (require 'recentf)
  (setq recentf-save-file (concat user-emacs-directory "recentf"))
  (setq recentf-max-saved-items 1000)
  (setq recentf-max-menu-items 500)
  (setq recentf-auto-cleanup 300)
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (add-to-list 'recentf-exclude ".*elpa.*autoloads\.el$")
  (recentf-mode t)
  (run-with-idle-timer 600 t #'recentf-save-list)

  ;; GC
  (defun /core/minibuffer-setup-hook () (setq gc-cons-threshold most-positive-fixnum))
  (defun /core/minibuffer-exit-hook () (setq gc-cons-threshold (* 64 1024 1024)))
  (add-hook 'minibuffer-setup-hook #'/core/minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'/core/minibuffer-exit-hook)

  ;; pcomplete
  (setq pcomplete-ignore-case t)

  ;; imenu
  (setq-default imenu-auto-rescan t)

  ;; narrowing
  (put 'narrow-to-region 'disabled nil)

  ;; dired
  (after 'dired
    (require 'dired-x))

  (setq insert-directory-program "gls")
  (setq dired-use-ls-dired t)

  ;; comint
  (after 'comint
    (defun /core/toggle-comint-scroll-to-bottom-on-output ()
      (interactive)
      (if comint-scroll-to-bottom-on-output
          (setq comint-scroll-to-bottom-on-output nil)
        (setq comint-scroll-to-bottom-on-output t))))

  ;; compile
  (setq compilation-always-kill t)
  (setq compilation-ask-about-save nil)
  (add-hook 'compilation-filter-hook
            (lambda ()
              (when (eq major-mode 'compilation-mode)
                (require 'ansi-color)
                (let ((inhibit-read-only t))
                  (ansi-color-apply-on-region (point-min) (point-max))))))

  ;; bookmarks
  (setq bookmark-default-file (concat user-emacs-directory "bookmarks"))
  (setq bookmark-save-flag 1)

  ;; ediff
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; re-builder
  (setq reb-re-syntax 'string)

  ;; clean up old buffers periodically
  (midnight-mode)
  (midnight-delay-set 'midnight-delay 0)

  ;; ibuffer
  (setq ibuffer-expert nil)
  (setq ibuffer-show-empty-filter-groups t)
  (add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode)

  ;; auto-save
  (let ((dir (expand-file-name (concat user-emacs-directory "auto-save/"))))
    (setq auto-save-list-file-prefix (concat dir "saves-"))
    (setq auto-save-file-name-transforms `((".*" ,(concat dir "save-") t))))

  ;; backups
  (setq backup-directory-alist `((".*" . ,(expand-file-name (concat user-emacs-directory "backups/")))))
  (setq backup-by-copying t)
  (setq version-control t)
  (setq kept-old-versions 1000)
  (setq kept-new-versions 50)
  (setq delete-old-versions t)

  ;; scrolling
  (setq scroll-conservatively 9999
        scroll-perserve-screen-position t
        scroll-margin 3)

  ;; unique buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-ignore-buffers-re "^\\*"
        uniquify-after-fill-buffer-p t)

  (defun /core/do-not-kill-scratch-buffer ()
    (if (member (buffer-name (current-buffer))
                '("*scratch*" "*Messages*" "*Require Times*"))
        (progn
          (bury-buffer)
          nil)
      t))
  (add-hook 'kill-buffer-query-functions '/core/do-not-kill-scratch-buffer)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (let ((coding 'utf-8-unix))
    (setq locale-coding-system coding)
    (set-selection-coding-system coding)
    (set-default-coding-systems coding)
    (prefer-coding-system coding)
    (setq-default buffer-file-coding-system coding))
  (set-language-environment "UTF-8")

  (setq sentence-end-double-space nil)
  (setq delete-by-moving-to-trash t)
  (setq ring-bell-function 'ignore)
  (setq mark-ring-max 64)
  (setq global-mark-ring-max 128)
  (setq save-interprogram-paste-before-kill t)
  (setq create-lockfiles nil)
  (setq echo-keystrokes 0.01)
  (setq initial-major-mode 'org-mode)
  (setq eval-expression-print-level nil)
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
  (setq-default tab-always-indent 'complete)

  (setq inhibit-spash-screen t)
  (setq inhibit-startup-echo-area-message t)

  (global-visual-line-mode)
  (which-function-mode t)
  (blink-cursor-mode -1)
  (global-auto-revert-mode t)
  (electric-indent-mode t)
  (transient-mark-mode t)
  (delete-selection-mode t)
  (random t)

  (defun /core/find-file-hook ()
    (when (string-match "\\.min\\." (buffer-file-name))
      (fundamental-mode)))
  (add-hook 'find-file-hook #'/core/find-file-hook)

  (require-package 'elisp-demos)
  (advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1)

  (setq user-full-name "Matthew M. Nelson")
  (setq user-mail-address "dogenpunk@gmail.com")

  ;; Display a backtrace when errors occur
  (setq debug-on-error t)

  ;; Display byte-compiler warnings on error
  (setq byte-compile-debug t)

  (setq scroll-error-top-bottom t)

  (defcustom dotemacs-globally-ignored-directories
    '("elpa" ".cache" "target" "dist" "node_modules" ".git" ".hg" ".svn" ".idea")
    "A set of default directories to ignore for anything that involves searching."
    :type '(repeat string)
    :group 'dotemacs)

#+end_src

* Elisp

#+begin_src emacs-lisp
(setq elp-sort-by-function 'elp-sort-by-average-time)
#+end_src

* Key bindings

** Quickly define shortcuts

#+begin_src emacs-lisp
  (defvar my/refile-map (make-sparse-keymap))
  (defmacro my/defshortcut (key file)
    `(progn
       (set-register ,key (cons 'file ,file))
       (define-key my/refile-map
         (char-to-string ,key)
         (lambda (prefix)
           (interactive "p")
           (let((org-refile-targets '(((,file) :maxlevel . 6)))
                (current-prefix-arg (org current-prefix-arg '(4))))
             (call-interactively 'org-refile))))))

#+end_src

** Registers

#+begin_src emacs-lisp
  (set-register ?i (cons 'file (expand-file-name "emacs.org" user-emacs-directory)))
  (my/defshortcut ?j "~/org/journal.org")
  (my/defshortcut ?b "~/org/band.org")
  (my/defshortcut ?l "~/org/all-posts.org")
  (my/defshortcut ?s "~/org/school.org")
  (my/defshortcut ?g "~/org/goals.org")
  (my/defshortcut ?n "~/org/inbox.org")
  (my/defshortcut ?f "~/org/freelancing.org")
  (my/defshortcut ?e "~/Documents/School")
  (my/defshortcut ?w "~/Workspace/consulting")
#+end_src

** Mac specific key bindings

#+begin_src emacs-lisp
  (setq mac-option-modifier nil)
  (setq mac-command-modifier 'meta)
#+end_src

** Which Key

#+begin_src emacs-lisp
  (require-package 'which-key)
  (setq which-key-idle-delay 0.2)
  (setq which-key-min-display-lines 3)
  (which-key-mode)

#+end_src

** Hippie expand

#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** ibuffer

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Searching in buffer

I find it's quicker and easier to use regexp-aware searches within a buffer.

#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

** Smart open line

#+begin_src emacs-lisp
  (defun smart-open-line-above ()
    "Insert an empty line above the current line.
  Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (defun smart-open-line ()
    "Insert an empty line after the current line.
  Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (global-set-key (kbd "M-o") 'smart-open-line)
  (global-set-key (kbd "M-O") 'smart-open-line-above)
#+end_src

** Find things fast!!!

I haven't really started using ftf, but my intuition tells me it could
be useful once I figure out how to fit it into my workflow.

#+begin_src emacs-lisp
  (require-package 'find-things-fast)
  (global-set-key (kbd "<f1>") 'ftf-find-file)
  (global-set-key (kbd "<f2>") 'ftf-grepsource)
  (global-set-key (kbd "<f3>") 'ftf-compile)
#+end_src

** Keying statistics

Much like =find-things-fast=, this isn't something I've integrated yet.

#+begin_src emacs-lisp
  (require-package 'keyfreq)
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
#+end_src

** Global org keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c b") 'org-switchb)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Quickly switch to other window

Quite frequently, I have one Emacs frame split once or twice. A simple
optimization is having a single keystroke to switch between windows
rather than the more common =C-x o= (although, my muscle memory falls
back to that one quite often).

#+begin_src emacs-lisp
(global-set-key (kbd "<f7>") 'other-window)
(global-set-key (kbd "<C-f7>") (lambda () (interactive) (other-window -1)))
#+end_src

** Make narrow or widen DWIM

#+begin_src emacs-lisp
(defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
intelligently.means: region, subtree, or defun, whichever applies
first.

With prefix `P', don't widen, just narrow even if buffer is
already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode) (org-narrow-to-subtree))
        (t (narrow-to-defun))))

(global-set-key (kbd "C-x n x") 'narrow-or-widen-dwim)
#+end_src

** Mode/app specific keybindings

*** Magit

#+begin_src emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src

*** Speedbar

#+begin_src emacs-lisp
(global-set-key [f11] 'speedbar)
#+end_src

*** Company completion

#+begin_src emacs-lisp
  (after 'company
    (define-key company-active-map (kbd "<tab>") #'company-select-next)
    (define-key company-active-map (kbd "<backtab>") #'company-select-previous)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "C-n") #'company-select-next))

#+end_src

*** Dired

#+begin_src emacs-lisp
(global-set-key (kbd "C-~") (lambda () (interactive) (dired "~")))
(global-set-key (kbd "C-c f d") 'find-name-dired)
(global-set-key (kbd "C-c g") 'grep-find)
#+end_src
* Clojure

I waffle between =cider= and =inf-clojure= mode a lot. =cider= has often
been difficult to setup in the past. Currently, things work mostly
right (aside from controlling which version of Java is used to run
commands).

#+begin_src emacs-lisp
(require-package 'clojure-mode)

(add-hook 'clojure-mode-hook
          (lambda ()
            (require-package 'cider)
            (cider-mode t)
            (local-set-key (kbd "RET") 'newline-and-indent)))
(add-hook 'clojure-mode-hook 'origami-mode)
(add-hook 'clojure-mode-hook 'aggressive-indent-mode)
(setq clojure-align-forms-automatically t)

(after [cider]
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (add-hook 'cider-repl-mode-hook #'eldoc-mode)
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-repl-mode-hook #'smartparens-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'smartparens-mode))
#+end_src

* Company

#+begin_src emacs-lisp
  (require-package 'company)

  (setq company-idle-delay 0.3)
  (setq company-minimum-prefix-length 1)
  (setq company-show-numbers t)
  (setq company-tooltip-limit 20)

  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-ignore-case t)

  (setq company-dabbrev-code-everywhere t)
  (setq company-dabbrev-code-ignore-case t)

  (setq company-etags-ignore-case t)

  (setq company-global-modes
        '(not
          eshell-mode comint-mode text-mode erc-mode))

  (global-company-mode)

  (unless (face-attribute 'company-tooltip :background)
    (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
    (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
    (set-face-attribute 'company-preview nil :background "black")
    (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
    (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
    (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

  (require-package 'company-quickhelp)
  (company-quickhelp-mode 1)

#+end_src

* Dash
#+begin_src emacs-lisp
(require-package 'dash-at-point)

(global-set-key (kbd "C-c d") 'dash-at-point)
(global-set-key (kbd "C-c e") 'dash-at-point-with-docset)
#+end_src

* Elfeed
#+begin_src emacs-lisp
  (require-package 'elfeed-org)

  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
#+end_src
* ERC
#+begin_src emacs-lisp
  (require 'erc)
  (require 'erc-log)
  (require 'erc-notify)
  (require 'erc-spelling)
  (require 'erc-autoaway)

  (setq erc-modules '(autoaway autojoin irccontrols log netsplit noncommands
                      notify pcomplete completion ring services stamp track
                      truncate))
  (after 'erc
    (setq erc-log-channels-directory (concat user-emacs-directory "erc/logs"))
    (setq erc-hide-list '("JOIN" "PART" "QUIT"))

    (setq erc-timestamp-only-if-changed-flag nil)
    (setq erc-timestamp-format "[%H:%M] ")
    (setq erc-insert-timestamp-function 'erc-insert-timestamp-left)
    (setq erc-kill-buffer-on-part t)
    (setq erc-kill-queries-on-quit t)
    (setq erc-kill-server-buffer-on-quit t)
    (setq erc-query-display 'buffer)
    (erc-track-mode t)
    (erc-completion-mode 1)
    (auto-fill-mode -1)
    (erc-ring-mode 1)
    (erc-log-mode 1)
    (erc-services-mode 1)
    (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                    "324" "329" "332" "333" "353" "477"))

    (setq erc-save-buffer-on-part t)
    (defadvice save-buffers-kill-emacs (before save-logs (arg) activate)
      (save-some-buffers t (lambda () (when (eq major-mode 'erc-mode) t))))

    (setq erc-truncate-mode t)

    (add-hook 'window-configuration-change-hook
              (lambda ()
                (setq erc-fill-column (- (window-width) 2)))))

#+end_src

* Flycheck
#+begin_src emacs-lisp
(require-package 'flycheck)

(setq flycheck-standard-error-navigation t)
(setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc html-tidy))

(add-hook 'after-init-hook #'global-flycheck-mode)

(when (display-graphic-p)
  (require-package 'flycheck-pos-tip)
  (setq flycheck-pos-tip-timeout -1)
  (flycheck-pos-tip-mode))

(defun /flycheck/advice/next-error-find-buffer (orig-func &rest args)
  (let* ((special-buffers
          (cl-loop for buffer in (mapcar #'window-buffer (window-list))
                   when (with-current-buffer buffer
                          (and
                           (eq (get major-mode 'mode-class) 'special)
                           (boundp 'next-error-function)))
                   collect buffer))
         (first-special-buffer (car special-buffers)))
    (if first-special-buffer
        first-special-buffer
      (apply orig-func args))))

(advice-add #'next-error-find-buffer :around #'/flycheck/advice/next-error-find-buffer)

#+end_src

* Ivy, counsel, & swiper
#+begin_src emacs-lisp
(require-package 'ivy)
(setq ivy-use-virtual-buffers t)
(setq ivy-virtual-abbreviate 'full)
(setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
(setq ivy-height 16)
(setq ivy-display-style 'fancy)
(setq ivy-count-format "[%d/%d] ")
(setq ivy-initial-inputs-alist nil)

(after 'lv
  (setq ivy-display-function
        (defun /ivy/display-function (text)
          (let ((lv-force-update t))
            (lv-message
             (if (string-match "\\`\n" text)
                 (substring text 1)
               text))))))

(require-package 'swiper)
(after 'swiper
  (defadvice swiper (before dotemacs activate)
    (setq gc-cons-threshold most-positive-fixnum))
  (defadvice swiper-all (before dotemacs activate)
    (setq gc-cons-threshold most-positive-fixnum)))

(require-package 'counsel)

(after "projectile-autoloads"
  (require-package 'counsel-projectile))

(defmacro /ivy/propertize (prefix face)
  `(lambda (str)
     (propertize str 'line-prefix ,prefix 'face ,face)))

(defun /ivy/mini ()
  (interactive)
  (setq gc-cons-threshold most-positive-fixnum)
  (let* ((buffers (mapcar #'buffer-name (buffer-list)))
         (project-files
          (if (projectile-project-p)
              (mapcar (/ivy/propertize "[ project ] " 'ivy-virtual)
                      (projectile-current-project-files))
            nil))
         (bufnames (mapcar (/ivy/propertize "[ buffer ] " 'ivy-remote) buffers))
         (recents (mapcar (/ivy/propertize "[ recent ] " 'ivy-subdir) recentf-list)))
    (ivy-read "Search: " (append project-files bufnames recents)
              :action (lambda (f)
                        (with-ivy-window
                          (cond ((member f bufnames)
                                 (switch-to-buffer f))
                                ((file-exists-p f)
                                 (find-file f))
                                (t
                                 (find-file (concat (projectile-project-root) f)))))))))

(counsel-mode t)
(counsel-projectile-mode t)
(ivy-mode t)

#+end_src

* Lisp

#+begin_src emacs-lisp
  (require-package 'elisp-slime-nav)
  (after 'elisp-slime-nav
    (defadvice elisp-slime-nav-find-elisp-thing-at-point (after dotemacs activate)
      (recenter)))

  ;;(require-package 'paredit)

  (defun /lisp/major-mode-hook ()
    (progn
      (elisp-slime-nav-mode)
      (eldoc-mode)
      (smartparens-mode t)))

  (add-hook 'emacs-lisp-mode-hook #'/lisp/major-mode-hook)
  (add-hook 'lisp-interaction-mode-hook #'/lisp/major-mode-hook)
  (add-hook 'ielm-mode-hook #'/lisp/major-mode-hook)
#+end_src

* Misc
#+begin_src emacs-lisp
(require-package 'pcache)
(setq pcache-directory (concat user-emacs-directory "pcache/"))

(require-package 'request)
(setq request-storage-directory (concat user-emacs-directory "request/"))

(require-package 'wgrep)
(when (executable-find "ag")
  (require-package 'ag)
  (setq ag-highlight-search t)
  (setq ag-ignore-list dotemacs-globally-ignored-directories)
  (add-hook 'ag-mode-hook (lambda () (toggle-truncate-lines t)))
  (require-package 'wgrep-ag))

(require-package 'popwin)
(require 'popwin)
(popwin-mode)

(require-package 'aggressive-indent)
(require 'aggressive-indent)
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'lisp-mode-hook #'aggressive-indent-mode)

(require-package 'browse-kill-ring)

#+end_src

* Navigation
#+begin_src emacs-lisp
(require-package 'avy)

(require-package 'ace-window)
(global-set-key (kbd "C-x o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?o))
(setq aw-background nil)
(custom-set-faces
 '(aw-leading-char-face
   ((t (:inherit ace-jump-face-foreground :height 3.0)))))

(setq locate-command "mdfind") ;; MacOS Spotlight
(global-set-key (kbd "C-c f l") 'locate)

(defun locate-org-files (search-string)
  "Adjust `locate-with-filter' to only search `org-mode' files
  with SEARCH-STRING."
  (interactive "sSearch string: ")
  (locate-with-filter search-string ".org$"))
(global-set-key (kbd "C-c f o") 'locate-org-files)

(require-package 'visual-regexp)
(require-package 'visual-regexp-steroids)
(global-set-key (kbd "C-c r") 'vr/replace)
(global-set-key (kbd "C-c q") 'vr/query-replace)

#+end_src

* Org mode
#+begin_src emacs-lisp
  (after 'org
    (unless (file-exists-p org-directory)
      (make-directory org-directory))

    (setq org-default-notes-file (expand-file-name (concat org-directory "/inbox.org")))
    (setq org-log-done t)
    (setq org-log-into-drawer t)

    (setq org-use-fast-todo-selection t)
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)

    ;; Babel
    (setq org-babel-load-languages
          '((sh . t)
            (emacs-lisp . t)
            (ditaa . t)
            (planduml . t)
            (sql . t)
            (clojure . t)))
    (setq org-babel-default-header-args
          '((:session . "none")
            (:results . "replace")
            (:exports . "code")
            (:cache   . "no")
            (:noweb   . "yes")
            (:hlines  . "no")
            (:tangle  . "no")
            (:padnewline . "yes")))
    (setq org-babel-clojure-backend 'cider)

    (after-load 'ob-ditaa
      (unless (and (boundp 'org-ditaa-jar-path)
                   (file-exists-p org-ditaa-jar-path))
        (let ((jar-name "ditaa0_9.jar")
              (url "http://jaist.dl.sourceforge.net/project/ditaa/ditaa/0.9/ditaa0_9.zip"))
          (setq org-ditaa-jar-path (expand-file-name jar-name (file-name-directory user-init-file)))
          (unless (file-exists-p org-ditaa-jar-path)
            (sanityinc/grab-ditaa url jar-name)))))

    (after-load 'ob-plantuml
      (let ((jar-name "plantuml.jar")
            (url "http://jaist.dl.sourceforge.net/project/plantuml/plantuml.jar"))
        (setq org-plantuml-jar-path (expand-file-name jar-name (file-name-directory
                                                                user-init-file)))
        (unless (file-exists-p org-plantuml-jar-path)
          (url-copy-file url org-plantuml-jar-path))))

    (when (boundp 'org-plantuml-jar-path)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((plantuml . t))))

    (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)
    (org-clock-persistence-insinuate)

    (defun /org/org-mode-hook ()
      (toggle-truncate-lines t)
      (setq show-trailing-whitespace t)
      (turn-on-auto-fill)
      (add-hook 'before-save-hook
                'org-update-all-dblocks t t))
    (add-hook 'org-mode-hook #'/org/org-mode-hook)


    (require-package 'ob-async)
    (require 'ob-async)

    (require-package 'org-bullets)
    (add-hook 'org-mode-hook #'org-bullets-mode)

    ;; UI
    (setq org-startup-indented t)
    (setq org-src-fontify-natively t)
    (setq org-pretty-entities t)
    (setq org-hide-emphasis-markers t)
    (setq org-fontify-whole-heading-line t)
    (setq org-fontify-done-headline t)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-ellipsis "…")
    (setq org-startup-align-all-tables t))
#+end_src

*** Todos
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "INPROGRESS" "BLOCKED" "REVIEW" "|" "DONE" "CANCELLED" "ARCHIVED")))

  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("INPROGRESS" . "yellow")
          ("BLOCKED" . "red")
          ("REVIEW" . "orange")
          ("DONE" . "green")
          ("CANCELLED" . "gray35")
          ("ARCHIVED" . "blue")))
#+end_src
*** Agenda

#+begin_src emacs-lisp
  (setq org-agenda-files `(,org-directory))
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  (setq org-agenda-custom-commands
        (quote (("c" todo "DONE|CANCELLED|ARCHIVED" nil)
                ("b" todo "BLOCKED" nil)
                ("p" "Today"
                 ((agenda "plain"
                          ((org-agenda-span 'day)))
                  (tags-todo "+PRIORITY=\"A\""
                             ((org-agenda-span 'day)
                              (org-agenda-overriding-header
                               "Priority tasks")))
                  (alltodo ""
                           ((org-agenda-skip-function
                             '(org-agenda-skip-if nil '(scheduled deadline)))
                            (org-agenda-overriding-header
                             "Low priority tasks")))))
                ("W" agenda "" ((org-agenda-ndays 21)))
                )))

#+end_src
* MacOS specifics
#+begin_src emacs-lisp
(defcustom dotemacs-os/additional-exec-paths
  nil
  "Additional paths to be added to `exec-path'."
  :type '(repeat (string))
  :group 'dotemacs)

(require-package 'exec-path-from-shell)
(exec-path-from-shell-initialize)

(defun /os/addpath (patth)
  (let* ((directory (expand-file-name path))
	 (env-value (concat directory path-separator (getenv "PATH"))))
    (when directory
      (setenv "PATH" env-value)
      (setq eshell-path-env env-value)
      (add-to-list 'exec-path directory))))

(dolist (path dotemacs-os/additional-exec-paths)
  (/os/addpath path))

(when (eq system-type 'darwin)
  (require-package 'osx-trash)
  (osx-trash-setup)

  (require-package 'reveal-in-osx-finder))

(defun /os/reveal-in-os ()
  (interactive)
  (call-interactively #'reveal-in-osx-finder))
#+end_src

* Projectile
#+begin_src emacs-lisp
(require-package 'projectile)

(setq projectile-cache-file (concat user-emacs-directory "projectile.cache"))
(setq projectile-known-projects-file
      (concat user-emacs-directory "projectile-bookmarks.eld"))
(setq projectile-indexing-method 'alien)
(setq projectile-enable-caching t)

;;(setq projectile-completion-system 'ido)


(setq projectile-switch-project-action 'projectile-commander)
(setq projectile-create-missing-test-files t)

(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(dolist (dir dotemacs-globally-ignored-directories)
  (add-to-list 'projectile-globally-ignored-directories dir))

(dolist (file '(".DS_Store"))
  (add-to-list 'projectile-globally-ignored-files file))

(cond
 ((executable-find "ag")
  (setq projectile-generic-command
        (concat "ag -0 -l --nocolor"
                (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore-dir="))))
 ((executable-find "ack")
  (setq projectile-generic-command
        (concat "ack -f --print0"
                (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore-dir=")))))
#+end_src

* Smartparens
#+begin_src emacs-lisp
  (require-package 'smartparens)
  (require 'smartparens-config)

  (electric-pair-mode -1)

  (setq sp-autoinsert-quote-if-followed-by-closing-pair nil)
  (setq sp-autoinsert-pair t)

  (setq sp-show-pair-delay 0)
  (setq sp-show-pair-from-inside t)

  ;;(show-smartparens-global-mode t)
  ;;(smartparens-global-mode t)

  (sp-use-smartparens-bindings)

#+end_src

* Flyspell
#+begin_src emacs-lisp
(when (or (executable-find "aspell")
          (executable-find "ispell")
          (executable-find "hunspell"))
  (eval-when-compile (require 'cl))
  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (when (cl-find-if #'derived-mode-p '(text-mode org-mode))
                (turn-on-flyspell)))))

#+end_src

* Utility Functions
#+begin_src emacs-lisp
(defun /utils/window-killer ()
  "Closes the window, and deletes the buffer if it's the last window open."
  (interactive)
  (if (> buffer-display-count 1)
      (if (= (length (window-list)) 1)
          (kill-buffer)
        (delete-window))
    (kill-buffer-and-window)))

(defun /utils/minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is actie, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

(defun /utils/google ()
  "Google the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url
   (concat
    "https://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (url-hexify-string (if mark-active
                           (buffer-substring (region-beginning) (region-end))
                         (read-string "Search Google: "))))))

(defun /utils/eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (let ((value (eval (preceding-sexp))))
    (backward-kill-sexp)
    (insert (format "%s" value))))

(defun /utils/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))

(defun /utils/delete-current-buffer-file ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))

(defun /utils/goto-scratch-buffer ()
  "Create a new scratch buffer."
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*")))

(defun /utils/insert-last-kbd-macro ()
  (interactive)
  (name-last-kbd-macro 'my-last-macro)
  (insert-kbd-macro 'my-last-macro))

(defun /utils/set-buffer-to-unix-format ()
  "Converts the current buffer to UNIX file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix nil))

(defun /utils/set-buffer-to-dos-format ()
  "Converts the current buffer to DOS file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos nil))

(defun /utils/find-file-as-root (file)
  "Edits a file as root."
  (interactive "f")
  (find-file-other-window (concat "/sudo:root@localhost:" file)))

#+end_src

* VCS
#+begin_src emacs-lisp
(setq vc-make-backup-files t)

(when (executable-find "git")
  (require-package 'magit)
  (require-package 'forge)

  (defun /vcs/magit-post-display-buffer-hook ()
    (if (string-match "*magit:" (buffer-name))
        (delete-other-windows)))
  (add-hook 'magit-post-display-buffer-hook #'/vcs/magit-post-display-buffer-hook)

  (setq magit-section-show-child-count t)
  (setq magit-diff-arguments '("--histogram"))
  (setq magit-ediff-dwim-show-on-hunks t)
  (setq magit-display-buffer-function #'magit-display-buffer-fullcolumn-most-v1)

  (after 'eshell
    (require-package 'pcmpl-git)
    (require 'pcmpl-git))

  (if (display-graphic-p)
      (progn
        (require-package 'git-gutter-fringe+)
        (require 'git-gutter-fringe+))
    (require-package 'git-gutter+))
  (global-git-gutter+-mode))

(require-package 'diff-hl)
(add-hook 'dired-mode-hook 'diff-hl-dired-mode)
(unless (display-graphic-p)
  (diff-hl-margin-mode))
(if (package-installed-p 'magit)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))

(require-package 'with-editor)
(autoload 'with-editor-export-editor "with-editor")
(defun /vcs/with-editor-export ()
  (unless (equal (buffer-name) "*fzf*")
    (with-editor-export-editor)
    (message "")))
(add-hook 'shell-mode-hook #'/vcs/with-editor-export)
(add-hook 'term-exec-hook #'/vcs/with-editor-export)
(add-hook 'eshell-mode-hook #'/vcs/with-editor-export)

(/boot/lazy-major-mode "^\\.gitignore$" gitignore-mode)
(/boot/lazy-major-mode "^\\.gitattributes$" gitattributes-mode)

#+end_src
* Custom file
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
* File-local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
